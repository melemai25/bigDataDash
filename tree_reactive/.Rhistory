str clean_data
str(clean_data)
library(shiny); runApp('viz.R')
runApp('viz.R')
str(clean_data)
# prepare data
pdata <- read.csv("car_prices.csv")
cdata <- read.csv("Car Dataset 1945-2020.csv")
# make column names same
names(cdata) <- tolower(names(cdata))
names(pdata) <- tolower(names(pdata))
# avg the mmr's and sell prices
avg_data <- pdata %>%
group_by(make, model, year) %>%
summarise(
avg_mmr = mean(mmr, na.rm = TRUE),
avg_sellingprice = mean(sellingprice, na.rm = TRUE),
.groups = 'drop'
)
# year_from and year_to in cdata to numeric
cdata <- cdata %>%
mutate(year_from = as.numeric(year_from), year_to = as.numeric(year_to))
# join and filter the data for the year range
cdata_with_avg <- cdata %>%
left_join(avg_data, by = c("make", "modle" = "model")) %>%
filter(year_from <= year & year <= year_to)
# filter out rows where avg_mmr or avg_sellingprice are NA
final_cdata_must_sell <- cdata_with_avg %>%
filter(!is.na(avg_mmr) & !is.na(avg_sellingprice))
final_cdata <- cdata_with_avg
# convert character columns to factors in cdata
cdata_factored <- final_cdata %>% mutate(across(where(is.character), factor))
# adds dif between mmr and real sell price
clean_data <- final_cdata %>%
mutate(diff = avg_mmr - avg_sellingprice)
clean_data$modle <- as.character(clean_data$modle)
clean_data$make <- as.character(clean_data$make)
clean_data[] <- lapply(clean_data, function(x) {
if (is.character(x)) {
(as.factor(x))
}
else {
x  # Leave non-factor columns unchanged
}
})
# hard coded, but not needed
clean_data$make <- as.character(clean_data$make)
clean_data$modle <- as.character(clean_data$modle)
clean_data$generation <- as.character(clean_data$generation)
clean_data$series <- as.character(clean_data$series)
clean_data$curb_weight_kg <- as.numeric(clean_data$curb_weight_kg)
clean_data$rear_track_mm <- as.numeric(clean_data$rear_track_mm)
clean_data$trailer_load_with_brakes_kg <- as.numeric(clean_data$trailer_load_with_brakes_kg)
clean_data$front_track_mm <- as.numeric(clean_data$front_track_mm)
clean_data$wheel_size_r14 <- as.numeric(clean_data$wheel_size_r14)
clean_data$cargo_volume_m3 <- as.numeric(clean_data$cargo_volume_m3)
clean_data$compression_ratio <- as.numeric(clean_data$compression_ratio)
clean_data$turnover_of_maximum_torque_rpm <- as.numeric(clean_data$turnover_of_maximum_torque_rpm)
clean_data$engine_hp_rpm <- as.numeric(clean_data$engine_hp_rpm)
clean_data$capacity_cm3 <- as.numeric(clean_data$capacity_cm3)
clean_data$engine_hp <- as.numeric(clean_data$engine_hp)
clean_data$range_km <- as.numeric(clean_data$range_km)
clean_data$max_trunk_capacity_l <- as.numeric(clean_data$max_trunk_capacity_l)
clean_data$max_speed_km_per_h <- as.numeric(clean_data$max_speed_km_per_h)
clean_data$back_suspension <- as.numeric(clean_data$back_suspension)
clean_data$front_suspension <- as.numeric(clean_data$front_suspension)
clean_data$trim <- as.numeric(clean_data$trim)
clean_data$fuel_tank_capacity_l <- as.numeric(clean_data$fuel_tank_capacity_l)
clean_data$cargo_compartment_length_width_height_mm <- as.numeric(clean_data$cargo_compartment_length_width_height_mm)
clean_data$front_rear_axle_load_kg <- as.numeric(clean_data$front_rear_axle_load_kg)
clean_data$length_mm <- as.numeric(clean_data$length_mm)
clean_data$width_mm <- as.numeric(clean_data$width_mm)
clean_data$wheelbase_mm <- as.numeric(clean_data$wheelbase_mm)
clean_data$maximum_torque_n_m <- as.numeric(clean_data$maximum_torque_n_m)
clean_data$clearance_mm <- as.numeric(clean_data$clearance_mm)
clean_data$load_height_mm <- as.numeric(clean_data$load_height_mm)
clean_data$number_of_seats <- as.numeric(clean_data$number_of_seats)
clean_data$ground_clearance_mm <- as.numeric(clean_data$trailer_load_with_brakes_kg)
clean_data$height_mm <- as.numeric(clean_data$height_mm)
clean_data$diff <- clean_data$avg_sellingprice - clean_data$avg_mmr
# gets rid of bad columns and rows
attach(clean_data)
clean_data <- clean_data %>%
select(where(~ mean(is.na(.)) <= 0.3))
clean_data<- clean_data[rowSums(is.na(clean_data)) <= 1, ]
incomplete_clean_data <- clean_data
clean_data<- clean_data[rowSums(is.na(clean_data)) <= 0, ]
plot(clean_data$max_speed_km_per_h, clean_data$engine_hp, main = "max speed vs engine hp", xlab = "engine hp", ylab = "max speed km/h")
#model1
#par(mar = c(0.1, 0.1, 0.1, 0.1))
set.seed(1)
train = sample(1:nrow(clean_data), nrow(clean_data)/2)
str(clean_data)
names(clean_data)
numeric_data <- clean_data %>% mutate_all(as.numeric)
str(numeric_data)
attach(numeric_data)
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
names(numeric_data)
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
summary(clean_data$clearance_mm)
summary(clean_data$ground_clearance_mm)
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
View(numeric_data)
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
str(clean_data)
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz2maybe.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
install.packages("dplyr")
runApp('viz_main_pred.R')
library(shiny); runApp('viz_main_pred.R')
install.packages("dplyr")
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
runApp('viz_main_pred.R')
