shiny::runApp()
usa_data <- read.csv("USA_CAR_DATASET.csv")
usa_clean <- usa_data %>%
select(price, year, brand, model, mileage, title_status)
usa_clean <- usa_clean %>%
filter(!is.na(price) & price > 0) %>%  # Remove rows with invalid prices
mutate(
year = as.numeric(year),
mileage = as.numeric(mileage),
brand = as.factor(brand),
title_status = as.factor(title_status)
) %>%
drop_na()  # Drop rows with remaining NAs
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(tidyr)
# Install glmnet if not already installed
if (!require(glmnet)) {
install.packages("glmnet")
library(glmnet)
}
# Load data
usa_data <- read.csv("USA_CAR_DATASET.csv")
# Data cleaning and feature engineering
usa_clean <- usa_data %>%
select(price, year, brand, model, mileage, title_status) %>%
filter(!is.na(price) & price > 0 & mileage > 0) %>%  # Remove rows with invalid prices or mileage
mutate(
year = as.numeric(year),
mileage = as.numeric(mileage),
brand = as.factor(brand),
title_status = as.factor(title_status)
) %>%
filter(brand != "Ford") %>%  # Remove "Ford" brand from the dataset
drop_na()  # Drop rows with remaining NAs
# Remove brands with few entries
brand_counts <- usa_clean %>%
group_by(brand) %>%
summarise(count = n()) %>%
arrange(count)
low_count_brands <- brand_counts %>%
filter(count < 10)
# Remove rows with brands having fewer than 10 entries
usa_clean <- usa_clean %>%
filter(!(brand %in% low_count_brands$brand))
# Standardize year and mileage for better performance
usa_clean <- usa_clean %>%
mutate(
year_scaled = scale(year),
mileage_scaled = scale(mileage)
)
# Add new features: interaction, non-linear, and binning
usa_clean <- usa_clean %>%
mutate(
year_mileage_interaction = year_scaled * mileage_scaled,
mileage_squared = mileage_scaled^2,
year_squared = year_scaled^2,
mileage_category = cut(mileage, breaks = c(-Inf, 50000, 100000, Inf), labels = c("Low", "Medium", "High"))
)
# Split the data into training and testing sets
set.seed(1)  # For reproducibility
n <- nrow(usa_clean)
train_indices <- sample(1:n, size = 0.7 * n)  # 70% training data
train_data <- usa_clean[train_indices, ]
test_data <- usa_clean[-train_indices, ]
# Log-transform the price and mileage
train_data <- train_data %>%
mutate(log_price = log(price), log_mileage = log(mileage))
test_data <- test_data %>%
mutate(log_price = log(price), log_mileage = log(mileage))
# Update model matrices for Ridge Regression to include the new features
x_train <- model.matrix(log_price ~ year_scaled + log_mileage + year_mileage_interaction + mileage_squared + year_squared + brand + title_status + mileage_category, data = train_data)[, -1]
y_train <- train_data$log_price
x_test <- model.matrix(log_price ~ year_scaled + log_mileage + year_mileage_interaction + mileage_squared + year_squared + brand + title_status + mileage_category, data = test_data)[, -1]
y_test <- test_data$log_price
# Apply Ridge Regression with cross-validation to handle multicollinearity
set.seed(1)
ridge_model <- cv.glmnet(x_train, y_train, alpha = 0, nfolds = 10)  # Ridge regression with 10-fold cross-validation
# Summary of the Ridge Model
print(ridge_model)
# Predict on test data
ridge_predictions <- predict(ridge_model, s = ridge_model$lambda.min, newx = x_test)
# Calculate RMSE, excluding NA values
rmse <- sqrt(mean((y_test - ridge_predictions)^2, na.rm = TRUE))
print(paste("RMSE:", rmse))
# Plot predicted vs actual values to visualize model performance
ggplot(data = test_data, aes(x = exp(ridge_predictions), y = price)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, color = 'red') +
theme_minimal() +
labs(title = "Predicted vs Actual Prices", x = "Predicted Price", y = "Actual Price")
runApp()
runApp()
View(usa_clean)
View(usa_data)
View(ridge_predictions)
View(test_data)
runApp()
runApp()
runApp()
library(shiny); runApp('car_dashboard.R')
runApp('car_dashboard.R')
runApp('car_dashboard.R')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shiny::runApp()
